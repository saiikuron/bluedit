{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/s/tuto/web/src/pages/change-password/[token].tsx\";\nimport { Alert, AlertIcon } from \"@chakra-ui/alert\";\nimport { Button } from \"@chakra-ui/button\";\nimport { Form, Formik } from \"formik\";\nimport { withUrqlClient } from \"next-urql\";\nimport { useRouter } from \"next/router\";\nimport { useState } from \"react\";\nimport { InputField } from \"../../components/InputField\";\nimport { Wrapper } from \"../../components/Wrapper\";\nimport { useChangePasswordMutation } from \"../../generated/graphql\";\nimport { createUrqlClient } from \"../../utils/createUrqlClient\";\nimport { toErrorMap } from \"../../utils/toErrorMap\";\n\nconst ChangePassword = ({\n  token\n}) => {\n  const router = useRouter();\n  const [, changePassword] = useChangePasswordMutation();\n  const {\n    0: tokenError,\n    1: setTokenError\n  } = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    variant: \"small\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        newPassword: \"\"\n      },\n      onSubmit: async (values, {\n        setErrors\n      }) => {\n        var _response$data, _response$data2;\n\n        const response = await changePassword({\n          newPassword: values.newPassword,\n          token\n        });\n\n        if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.changePassword.errors) {\n          const errorMap = toErrorMap(response.data.changePassword.errors);\n\n          if (\"token\" in errorMap) {\n            setTokenError(errorMap.token);\n          }\n\n          setErrors(errorMap);\n        } else if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.changePassword.user) {\n          // worked\n          router.push(\"/\");\n        }\n      },\n      children: ({\n        isSubmitting\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [tokenError ? /*#__PURE__*/_jsxDEV(Alert, {\n          status: \"error\",\n          children: [/*#__PURE__*/_jsxDEV(AlertIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 17\n          }, this), tokenError]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 15\n        }, this) : null, /*#__PURE__*/_jsxDEV(InputField, {\n          name: \"newPassword\",\n          label: \"New password\",\n          type: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          mt: 4,\n          isLoading: isSubmitting,\n          type: \"submit\",\n          colorScheme: \"teal\",\n          children: \"Change password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\nChangePassword.getInitialProps = ({\n  query\n}) => {\n  return {\n    token: query.token\n  };\n};\n\nexport default withUrqlClient(createUrqlClient, {\n  ssr: false\n})(ChangePassword);","map":{"version":3,"sources":["/home/s/tuto/web/src/pages/change-password/[token].tsx"],"names":["Alert","AlertIcon","Button","Form","Formik","withUrqlClient","useRouter","useState","InputField","Wrapper","useChangePasswordMutation","createUrqlClient","toErrorMap","ChangePassword","token","router","changePassword","tokenError","setTokenError","newPassword","values","setErrors","response","data","errors","errorMap","user","push","isSubmitting","getInitialProps","query","ssr"],"mappings":"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","sourcesContent":["import { Alert, AlertIcon } from \"@chakra-ui/alert\";\nimport { Button } from \"@chakra-ui/button\";\nimport { Form, Formik } from \"formik\";\nimport { NextPage } from \"next\";\nimport { withUrqlClient } from \"next-urql\";\nimport { useRouter } from \"next/router\";\nimport { useState } from \"react\";\nimport { InputField } from \"../../components/InputField\";\nimport { Wrapper } from \"../../components/Wrapper\";\nimport { useChangePasswordMutation } from \"../../generated/graphql\";\nimport { createUrqlClient } from \"../../utils/createUrqlClient\";\nimport { toErrorMap } from \"../../utils/toErrorMap\";\n\nconst ChangePassword: NextPage<{ token: string }> = ({ token }) => {\n  const router = useRouter();\n  const [, changePassword] = useChangePasswordMutation();\n  const [tokenError, setTokenError] = useState(\"\");\n  return (\n    <Wrapper variant=\"small\">\n      <Formik\n        initialValues={{ newPassword: \"\" }}\n        onSubmit={async (values, { setErrors }) => {\n          const response = await changePassword({\n            newPassword: values.newPassword,\n            token,\n          });\n          if (response.data?.changePassword.errors) {\n            const errorMap = toErrorMap(response.data.changePassword.errors);\n            if (\"token\" in errorMap) {\n              setTokenError(errorMap.token);\n            }\n            setErrors(errorMap);\n          } else if (response.data?.changePassword.user) {\n            // worked\n            router.push(\"/\");\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            {tokenError ? (\n              <Alert status=\"error\">\n                <AlertIcon />\n                {tokenError}\n              </Alert>\n            ) : null}\n            <InputField\n              name=\"newPassword\"\n              label=\"New password\"\n              type=\"password\"\n            ></InputField>\n            <Button\n              mt={4}\n              isLoading={isSubmitting}\n              type=\"submit\"\n              colorScheme=\"teal\"\n            >\n              Change password\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Wrapper>\n  );\n};\nChangePassword.getInitialProps = ({ query }) => {\n  return {\n    token: query.token as string,\n  };\n};\nexport default withUrqlClient(createUrqlClient, { ssr: false })(ChangePassword);\n"]},"metadata":{},"sourceType":"module"}