{"ast":null,"code":"import _toConsumableArray from \"/home/s/code/bluedit/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { dedupExchange, fetchExchange, stringifyVariables } from \"urql\";\nimport { MeDocument } from \"../generated/graphql\";\nimport { MyUpdateQuery } from \"./MyUpdateQuery\";\n\nvar cursorPagination = function cursorPagination() {\n  return function (_parent, fieldArgs, cache, info) {\n    var entityKey = info.parentKey,\n        fieldName = info.fieldName;\n    var allFields = cache.inspectFields(entityKey);\n    var fieldInfos = allFields.filter(function (info) {\n      return info.fieldName === fieldName;\n    });\n    var size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    }\n\n    var fieldKey = \"\".concat(fieldName, \"(\").concat(stringifyVariables(fieldArgs), \")\");\n    var inCache = cache.resolve(entityKey, fieldKey);\n    info.partial = !inCache;\n    var results = [];\n    fieldInfos.forEach(function (fi) {\n      var data = cache.resolve(entityKey, fi.fieldKey);\n      results.push.apply(results, _toConsumableArray(data));\n    });\n    return results;\n  };\n};\n\nexport var createUrqlClient = function createUrqlClient(ssrExchange) {\n  return {\n    url: \"http://localhost:4000/graphql\",\n    fetchOptions: {\n      credentials: \"include\"\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      resolvers: {\n        Query: {\n          posts: cursorPagination()\n        }\n      },\n      updates: {\n        Mutation: {\n          logout: function logout(_result, args, cache, info) {\n            MyUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function () {\n              return {\n                me: null\n              };\n            });\n          },\n          login: function login(_result, args, cache, info) {\n            MyUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user\n                };\n              }\n            });\n          },\n          register: function register(_result, args, cache, info) {\n            MyUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.register.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.register.user\n                };\n              }\n            });\n          }\n        }\n      }\n    }), ssrExchange, fetchExchange]\n  };\n};","map":{"version":3,"sources":["/home/s/code/bluedit/web/src/utils/createUrqlClient.ts"],"names":["cacheExchange","dedupExchange","fetchExchange","stringifyVariables","MeDocument","MyUpdateQuery","cursorPagination","_parent","fieldArgs","cache","info","entityKey","parentKey","fieldName","allFields","inspectFields","fieldInfos","filter","size","length","undefined","fieldKey","inCache","resolve","partial","results","forEach","fi","data","push","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","resolvers","Query","posts","updates","Mutation","logout","_result","args","query","me","login","result","errors","user","register"],"mappings":"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","sourcesContent":["import { cacheExchange, Resolver } from \"@urql/exchange-graphcache\";\nimport { dedupExchange, fetchExchange, stringifyVariables } from \"urql\";\nimport {\n  LoginMutation,\n  RegisterMutation,\n  MeDocument,\n  MeQuery,\n  LogoutMutation,\n} from \"../generated/graphql\";\nimport { MyUpdateQuery } from \"./MyUpdateQuery\";\n\nconst cursorPagination = (): Resolver => {\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info;\n\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n    if (size === 0) {\n      return undefined;\n    }\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`;\n    const inCache = cache.resolve(entityKey, fieldKey);\n    info.partial = !inCache;\n    const results: string[] = []\n    fieldInfos.forEach(fi => {\n      const data = cache.resolve(entityKey, fi.fieldKey) as string[]\n      results.push(...data);\n    })\n    return results\n  };\n};\n\n\nexport const createUrqlClient = (ssrExchange: any) => ({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\" as const,\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      resolvers:{\n        Query: {\n          posts: cursorPagination(),\n        },\n      },\n      updates: {\n        Mutation: {\n          logout: (_result, args, cache, info) => {\n            MyUpdateQuery<LogoutMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              () => ({ me: null })\n            );\n          },\n          login: (_result, args, cache, info) => {\n            MyUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.login.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.login.user,\n                  };\n                }\n              }\n            );\n          },\n          register: (_result, args, cache, info) => {\n            MyUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.register.user,\n                  };\n                }\n              }\n            );\n          },\n        },\n      },\n    }),\n    ssrExchange,\n    fetchExchange,\n  ],\n});\n"]},"metadata":{},"sourceType":"module"}