{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/s/code/bluedit/web/src/components/InputField.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { FormControl, FormErrorMessage, FormLabel, Input, Textarea } from \"@chakra-ui/react\";\nimport { useField } from \"formik\";\nimport React from \"react\";\n// isInvalid={!!error}> '' => false, 'error message' => true        !! converts error into a boolean\nexport const InputField = (_ref) => {\n  let {\n    label,\n    size: _,\n    textarea\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"label\", \"size\", \"textarea\"]);\n\n  let C = Input;\n\n  if (textarea) {\n    C = Textarea;\n  }\n\n  const [field, {\n    error\n  }] = useField(props);\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    isInvalid: !!error,\n    children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n      htmlFor: field.name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(C, _objectSpread(_objectSpread(_objectSpread({}, field), props), {}, {\n      id: field.name\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), error ? /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 16\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/home/s/code/bluedit/web/src/components/InputField.tsx"],"names":["FormControl","FormErrorMessage","FormLabel","Input","Textarea","useField","React","InputField","label","size","_","textarea","props","C","field","error","name"],"mappings":";;;;;;;;;;;;;AAAA,SACEA,WADF,EAEEC,gBAFF,EAGEC,SAHF,EAIEC,KAJF,EAKEC,QALF,QAMO,kBANP;AAOA,SAASC,QAAT,QAAyB,QAAzB;AACA,OAAOC,KAAP,MAA2C,OAA3C;AAQA;AAEA,OAAO,MAAMC,UAAqC,GAAG,UAK/C;AAAA,MALgD;AACpDC,IAAAA,KADoD;AAEpDC,IAAAA,IAAI,EAAEC,CAF8C;AAGpDC,IAAAA;AAHoD,GAKhD;AAAA,MADDC,KACC;;AACJ,MAAIC,CAAC,GAAGV,KAAR;;AACA,MAAIQ,QAAJ,EAAa;AACXE,IAAAA,CAAC,GAAGT,QAAJ;AACD;;AACD,QAAM,CAACU,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,IAAqBV,QAAQ,CAACO,KAAD,CAAnC;AACA,sBACE,QAAC,WAAD;AAAa,IAAA,SAAS,EAAE,CAAC,CAACG,KAA1B;AAAA,4BACE,QAAC,SAAD;AAAW,MAAA,OAAO,EAAED,KAAK,CAACE,IAA1B;AAAA,gBAAiCR;AAAjC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,CAAD,gDAAOM,KAAP,GAAkBF,KAAlB;AAAyB,MAAA,EAAE,EAAEE,KAAK,CAACE;AAAnC;AAAA;AAAA;AAAA;AAAA,YAFF,EAGGD,KAAK,gBAAG,QAAC,gBAAD;AAAA,gBAAmBA;AAAnB;AAAA;AAAA;AAAA;AAAA,YAAH,GAAkD,IAH1D;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAlBM","sourcesContent":["import {\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  Textarea,\n} from \"@chakra-ui/react\";\nimport { useField } from \"formik\";\nimport React, { InputHTMLAttributes } from \"react\";\n\ntype InputFieldProps = InputHTMLAttributes<HTMLInputElement> & {\n  label: string;\n  name: string;\n  textarea: boolean;\n};\n\n// isInvalid={!!error}> '' => false, 'error message' => true        !! converts error into a boolean\n\nexport const InputField: React.FC<InputFieldProps> = ({\n  label,\n  size: _,\n  textarea,\n  ...props\n}) => {\n  let C = Input;\n  if (textarea){\n    C = Textarea;\n  }\n  const [field, { error }] = useField(props);\n  return (\n    <FormControl isInvalid={!!error}>\n      <FormLabel htmlFor={field.name}>{label}</FormLabel>\n      <C {...field} {...props} id={field.name} />\n      {error ? <FormErrorMessage>{error}</FormErrorMessage> : null}\n    </FormControl>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}