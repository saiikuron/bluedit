{"ast":null,"code":"import { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { dedupExchange, fetchExchange } from \"urql\";\nimport { MeDocument } from \"../generated/graphql\";\nimport { MyUpdateQuery } from \"./MyUpdateQuery\";\nimport { pipe, tap } from 'wonka';\nexport var errorExchange = function errorExchange(_ref) {\n  var forward = _ref.forward;\n  return function (ops$) {\n    return pipe(forward(ops$), tap(function (_ref2) {\n      var error = _ref2.error;\n\n      // If the OperationResult has an error send a request to sentry\n      if (error) {\n        // the error is a CombinedError with networkError and graphqlErrors properties\n        sentryFireAndForgetHere(); // Whatever error reporting you have\n      }\n    }));\n  };\n};\nexport var createUrqlClient = function createUrqlClient(ssrExchange) {\n  return {\n    url: \"http://localhost:4000/graphql\",\n    fetchOptions: {\n      credentials: \"include\"\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      updates: {\n        Mutation: {\n          logout: function logout(_result, args, cache, info) {\n            MyUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function () {\n              return {\n                me: null\n              };\n            });\n          },\n          login: function login(_result, args, cache, info) {\n            MyUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user\n                };\n              }\n            });\n          },\n          register: function register(_result, args, cache, info) {\n            MyUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.register.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.register.user\n                };\n              }\n            });\n          }\n        }\n      }\n    }), ssrExchange, fetchExchange]\n  };\n};","map":{"version":3,"sources":["/home/s/code/bluedit/web/src/utils/createUrqlClient.ts"],"names":["cacheExchange","dedupExchange","fetchExchange","MeDocument","MyUpdateQuery","pipe","tap","errorExchange","forward","ops$","error","sentryFireAndForgetHere","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","updates","Mutation","logout","_result","args","cache","info","query","me","login","result","errors","user","register"],"mappings":"AAAA,SAASA,aAAT,QAA8B,2BAA9B;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,MAA7C;AACA,SAGEC,UAHF,QAMO,sBANP;AAOA,SAASC,aAAT,QAA8B,iBAA9B;AAEA,SAAiBC,IAAjB,EAAuBC,GAAvB,QAAkC,OAAlC;AAGA,OAAO,IAAMC,aAAuB,GAAG,SAA1BA,aAA0B;AAAA,MAAGC,OAAH,QAAGA,OAAH;AAAA,SAAiB,UAAAC,IAAI,EAAI;AAC9D,WAAOJ,IAAI,CACTG,OAAO,CAACC,IAAD,CADE,EAETH,GAAG,CAAC,iBAAe;AAAA,UAAZI,KAAY,SAAZA,KAAY;;AACjB;AACA,UAAIA,KAAJ,EAAW;AACT;AACAC,QAAAA,uBAAuB,GAFd,CAEiB;AAC3B;AACF,KANE,CAFM,CAAX;AAUD,GAXsC;AAAA,CAAhC;AAaP,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,WAAD;AAAA,SAAuB;AACrDC,IAAAA,GAAG,EAAE,+BADgD;AAErDC,IAAAA,YAAY,EAAE;AACZC,MAAAA,WAAW,EAAE;AADD,KAFuC;AAKrDC,IAAAA,SAAS,EAAE,CACThB,aADS,EAETD,aAAa,CAAC;AACZkB,MAAAA,OAAO,EAAE;AACPC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,MAAM,EAAE,gBAACC,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAAgC;AACtCpB,YAAAA,aAAa,CACXmB,KADW,EAEX;AAAEE,cAAAA,KAAK,EAAEtB;AAAT,aAFW,EAGXkB,OAHW,EAIX;AAAA,qBAAO;AAAEK,gBAAAA,EAAE,EAAE;AAAN,eAAP;AAAA,aAJW,CAAb;AAMD,WARO;AASRC,UAAAA,KAAK,EAAE,eAACN,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAAgC;AACrCpB,YAAAA,aAAa,CACXmB,KADW,EAEX;AAAEE,cAAAA,KAAK,EAAEtB;AAAT,aAFW,EAGXkB,OAHW,EAIX,UAACO,MAAD,EAASH,KAAT,EAAmB;AACjB,kBAAIG,MAAM,CAACD,KAAP,CAAaE,MAAjB,EAAyB;AACvB,uBAAOJ,KAAP;AACD,eAFD,MAEO;AACL,uBAAO;AACLC,kBAAAA,EAAE,EAAEE,MAAM,CAACD,KAAP,CAAaG;AADZ,iBAAP;AAGD;AACF,aAZU,CAAb;AAcD,WAxBO;AAyBRC,UAAAA,QAAQ,EAAE,kBAACV,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAAgC;AACxCpB,YAAAA,aAAa,CACXmB,KADW,EAEX;AAAEE,cAAAA,KAAK,EAAEtB;AAAT,aAFW,EAGXkB,OAHW,EAIX,UAACO,MAAD,EAASH,KAAT,EAAmB;AACjB,kBAAIG,MAAM,CAACG,QAAP,CAAgBF,MAApB,EAA4B;AAC1B,uBAAOJ,KAAP;AACD,eAFD,MAEO;AACL,uBAAO;AACLC,kBAAAA,EAAE,EAAEE,MAAM,CAACG,QAAP,CAAgBD;AADf,iBAAP;AAGD;AACF,aAZU,CAAb;AAcD;AAxCO;AADH;AADG,KAAD,CAFJ,EAgDTjB,WAhDS,EAiDTX,aAjDS;AAL0C,GAAvB;AAAA,CAAzB","sourcesContent":["import { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { dedupExchange, fetchExchange } from \"urql\";\nimport {\n  LoginMutation,\n  RegisterMutation,\n  MeDocument,\n  MeQuery,\n  LogoutMutation,\n} from \"../generated/graphql\";\nimport { MyUpdateQuery } from \"./MyUpdateQuery\";\n\nimport { filter, pipe, tap } from 'wonka';\nimport { Exchange } from 'urql';\n\nexport const errorExchange: Exchange = ({ forward }) => ops$ => {\n  return pipe(\n    forward(ops$),\n    tap(({ error }) => {\n      // If the OperationResult has an error send a request to sentry\n      if (error) {\n        // the error is a CombinedError with networkError and graphqlErrors properties\n        sentryFireAndForgetHere() // Whatever error reporting you have\n      }\n    })\n  );\n};\n\nexport const createUrqlClient = (ssrExchange: any) => ({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\" as const,\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      updates: {\n        Mutation: {\n          logout: (_result, args, cache, info) => {\n            MyUpdateQuery<LogoutMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              () => ({ me: null })\n            );\n          },\n          login: (_result, args, cache, info) => {\n            MyUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.login.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.login.user,\n                  };\n                }\n              }\n            );\n          },\n          register: (_result, args, cache, info) => {\n            MyUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.register.user,\n                  };\n                }\n              }\n            );\n          },\n        },\n      },\n    }),\n    ssrExchange,\n    fetchExchange,\n  ],\n});\n"]},"metadata":{},"sourceType":"module"}