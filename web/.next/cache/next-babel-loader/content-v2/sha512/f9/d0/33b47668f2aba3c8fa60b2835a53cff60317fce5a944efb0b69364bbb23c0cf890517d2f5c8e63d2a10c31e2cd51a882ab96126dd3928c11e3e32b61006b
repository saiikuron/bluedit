{"ast":null,"code":"import { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { dedupExchange, fetchExchange, stringifyVariables } from \"urql\";\nimport { MeDocument } from \"../generated/graphql\";\nimport { MyUpdateQuery } from \"./MyUpdateQuery\";\n\nconst cursorPagination = () => {\n  return (_parent, fieldArgs, cache, info) => {\n    const {\n      parentKey: entityKey,\n      fieldName\n    } = info;\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    }\n\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`;\n    const inCache = cache.resolve(entityKey, fieldKey);\n    info.partial = !inCache;\n    const results = [];\n    fieldInfos.forEach(fi => {\n      const data = cache.resolve(entityKey, fi.fieldKey);\n      results.push(...data);\n    });\n    return results;\n  };\n};\n\nexport const createUrqlClient = ssrExchange => ({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\"\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    resolvers: {\n      Query: {\n        posts: cursorPagination()\n      }\n    },\n    updates: {\n      Mutation: {\n        logout: (_result, args, cache, info) => {\n          MyUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, () => ({\n            me: null\n          }));\n        },\n        login: (_result, args, cache, info) => {\n          MyUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.login.errors) {\n              return query;\n            } else {\n              return {\n                me: result.login.user\n              };\n            }\n          });\n        },\n        register: (_result, args, cache, info) => {\n          MyUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.register.errors) {\n              return query;\n            } else {\n              return {\n                me: result.register.user\n              };\n            }\n          });\n        }\n      }\n    }\n  }), ssrExchange, fetchExchange]\n});","map":{"version":3,"sources":["/home/s/code/bluedit/web/src/utils/createUrqlClient.ts"],"names":["cacheExchange","dedupExchange","fetchExchange","stringifyVariables","MeDocument","MyUpdateQuery","cursorPagination","_parent","fieldArgs","cache","info","parentKey","entityKey","fieldName","allFields","inspectFields","fieldInfos","filter","size","length","undefined","fieldKey","inCache","resolve","partial","results","forEach","fi","data","push","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","resolvers","Query","posts","updates","Mutation","logout","_result","args","query","me","login","result","errors","user","register"],"mappings":"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","sourcesContent":["import { cacheExchange, Resolver } from \"@urql/exchange-graphcache\";\nimport { dedupExchange, fetchExchange, stringifyVariables } from \"urql\";\nimport {\n  LoginMutation,\n  RegisterMutation,\n  MeDocument,\n  MeQuery,\n  LogoutMutation,\n} from \"../generated/graphql\";\nimport { MyUpdateQuery } from \"./MyUpdateQuery\";\n\nconst cursorPagination = (): Resolver => {\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info;\n\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n    if (size === 0) {\n      return undefined;\n    }\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`;\n    const inCache = cache.resolve(entityKey, fieldKey);\n    info.partial = !inCache;\n    const results: string[] = []\n    fieldInfos.forEach(fi => {\n      const data = cache.resolve(entityKey, fi.fieldKey) as string[]\n      results.push(...data);\n    })\n    return results\n  };\n};\n\n\nexport const createUrqlClient = (ssrExchange: any) => ({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\" as const,\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      resolvers:{\n        Query: {\n          posts: cursorPagination(),\n        },\n      },\n      updates: {\n        Mutation: {\n          logout: (_result, args, cache, info) => {\n            MyUpdateQuery<LogoutMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              () => ({ me: null })\n            );\n          },\n          login: (_result, args, cache, info) => {\n            MyUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.login.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.login.user,\n                  };\n                }\n              }\n            );\n          },\n          register: (_result, args, cache, info) => {\n            MyUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.register.user,\n                  };\n                }\n              }\n            );\n          },\n        },\n      },\n    }),\n    ssrExchange,\n    fetchExchange,\n  ],\n});\n"]},"metadata":{},"sourceType":"module"}