{"ast":null,"code":"import { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { dedupExchange, fetchExchange } from \"urql\";\nimport { MeDocument } from \"../generated/graphql\";\nimport { MyUpdateQuery } from \"./MyUpdateQuery\";\nimport { pipe, tap } from 'wonka';\nimport { Router } from \"next/router\";\n\nconst errorExchange = ({\n  forward\n}) => ops$ => {\n  return pipe(forward(ops$), tap(({\n    error\n  }) => {\n    if (error !== null && error !== void 0 && error.message.includes(\"Not authenticated\")) {\n      Router.replace(\"/login\");\n    }\n  }));\n};\n\nexport const createUrqlClient = ssrExchange => ({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\"\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    updates: {\n      Mutation: {\n        logout: (_result, args, cache, info) => {\n          MyUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, () => ({\n            me: null\n          }));\n        },\n        login: (_result, args, cache, info) => {\n          MyUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.login.errors) {\n              return query;\n            } else {\n              return {\n                me: result.login.user\n              };\n            }\n          });\n        },\n        register: (_result, args, cache, info) => {\n          MyUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.register.errors) {\n              return query;\n            } else {\n              return {\n                me: result.register.user\n              };\n            }\n          });\n        }\n      }\n    }\n  }), errorExchange, ssrExchange, fetchExchange]\n});","map":{"version":3,"sources":["/home/s/code/bluedit/web/src/utils/createUrqlClient.ts"],"names":["cacheExchange","dedupExchange","fetchExchange","MeDocument","MyUpdateQuery","pipe","tap","Router","errorExchange","forward","ops$","error","message","includes","replace","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","updates","Mutation","logout","_result","args","cache","info","query","me","login","result","errors","user","register"],"mappings":"AAAA,SAASA,aAAT,QAA8B,2BAA9B;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,MAA7C;AACA,SAGEC,UAHF,QAMO,sBANP;AAOA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,OAA1B;AAEA,SAASC,MAAT,QAAuB,aAAvB;;AAEA,MAAMC,aAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiBC,IAAI,IAAI;AACvD,SAAOL,IAAI,CACTI,OAAO,CAACC,IAAD,CADE,EAETJ,GAAG,CAAC,CAAC;AAAEK,IAAAA;AAAF,GAAD,KAAe;AACjB,QAAGA,KAAH,aAAGA,KAAH,eAAGA,KAAK,CAAEC,OAAP,CAAeC,QAAf,CAAwB,mBAAxB,CAAH,EAAgD;AAC9CN,MAAAA,MAAM,CAACO,OAAP,CAAe,QAAf;AACD;AACF,GAJE,CAFM,CAAX;AAQD,CATD;;AAWA,OAAO,MAAMC,gBAAgB,GAAIC,WAAD,KAAuB;AACrDC,EAAAA,GAAG,EAAE,+BADgD;AAErDC,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE;AADD,GAFuC;AAKrDC,EAAAA,SAAS,EAAE,CACTnB,aADS,EAETD,aAAa,CAAC;AACZqB,IAAAA,OAAO,EAAE;AACPC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,MAAM,EAAE,CAACC,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,KAAgC;AACtCvB,UAAAA,aAAa,CACXsB,KADW,EAEX;AAAEE,YAAAA,KAAK,EAAEzB;AAAT,WAFW,EAGXqB,OAHW,EAIX,OAAO;AAAEK,YAAAA,EAAE,EAAE;AAAN,WAAP,CAJW,CAAb;AAMD,SARO;AASRC,QAAAA,KAAK,EAAE,CAACN,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,KAAgC;AACrCvB,UAAAA,aAAa,CACXsB,KADW,EAEX;AAAEE,YAAAA,KAAK,EAAEzB;AAAT,WAFW,EAGXqB,OAHW,EAIX,CAACO,MAAD,EAASH,KAAT,KAAmB;AACjB,gBAAIG,MAAM,CAACD,KAAP,CAAaE,MAAjB,EAAyB;AACvB,qBAAOJ,KAAP;AACD,aAFD,MAEO;AACL,qBAAO;AACLC,gBAAAA,EAAE,EAAEE,MAAM,CAACD,KAAP,CAAaG;AADZ,eAAP;AAGD;AACF,WAZU,CAAb;AAcD,SAxBO;AAyBRC,QAAAA,QAAQ,EAAE,CAACV,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,KAAgC;AACxCvB,UAAAA,aAAa,CACXsB,KADW,EAEX;AAAEE,YAAAA,KAAK,EAAEzB;AAAT,WAFW,EAGXqB,OAHW,EAIX,CAACO,MAAD,EAASH,KAAT,KAAmB;AACjB,gBAAIG,MAAM,CAACG,QAAP,CAAgBF,MAApB,EAA4B;AAC1B,qBAAOJ,KAAP;AACD,aAFD,MAEO;AACL,qBAAO;AACLC,gBAAAA,EAAE,EAAEE,MAAM,CAACG,QAAP,CAAgBD;AADf,eAAP;AAGD;AACF,WAZU,CAAb;AAcD;AAxCO;AADH;AADG,GAAD,CAFJ,EAgDTzB,aAhDS,EAiDTQ,WAjDS,EAkDTd,aAlDS;AAL0C,CAAvB,CAAzB","sourcesContent":["import { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { dedupExchange, fetchExchange } from \"urql\";\nimport {\n  LoginMutation,\n  RegisterMutation,\n  MeDocument,\n  MeQuery,\n  LogoutMutation,\n} from \"../generated/graphql\";\nimport { MyUpdateQuery } from \"./MyUpdateQuery\";\nimport { pipe, tap } from 'wonka';\nimport { Exchange } from 'urql';\nimport { Router } from \"next/router\";\n\nconst errorExchange: Exchange = ({ forward }) => ops$ => {\n  return pipe(\n    forward(ops$),\n    tap(({ error }) => {\n      if(error?.message.includes(\"Not authenticated\")){\n        Router.replace(\"/login\")\n      }\n    })\n  );\n};\n\nexport const createUrqlClient = (ssrExchange: any) => ({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\" as const,\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      updates: {\n        Mutation: {\n          logout: (_result, args, cache, info) => {\n            MyUpdateQuery<LogoutMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              () => ({ me: null })\n            );\n          },\n          login: (_result, args, cache, info) => {\n            MyUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.login.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.login.user,\n                  };\n                }\n              }\n            );\n          },\n          register: (_result, args, cache, info) => {\n            MyUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.register.user,\n                  };\n                }\n              }\n            );\n          },\n        },\n      },\n    }),\n    errorExchange,\n    ssrExchange,\n    fetchExchange,\n  ],\n});\n"]},"metadata":{},"sourceType":"module"}