{"ast":null,"code":"import _defineProperty from \"/home/s/tuto/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/s/tuto/web/src/pages/_app.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ChakraProvider, ColorModeProvider } from \"@chakra-ui/react\";\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { Provider, createClient, dedupExchange, fetchExchange } from \"urql\";\nimport { MeDocument } from \"../generated/graphql\";\nimport theme from \"../theme\";\n\nfunction MyUpdateQuery(cache, qi, result, fn) // update function\n{\n  return cache.updateQuery(qi, function (data) {\n    return fn(result, data);\n  });\n}\n\n_c = MyUpdateQuery;\nvar client = createClient({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\"\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    updates: {\n      Mutation: {\n        logout: function logout(_result, args, cache, info) {\n          MyUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, function () {\n            return {\n              me: null\n            };\n          });\n        },\n        login: function login(_result, args, cache, info) {\n          MyUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, function (result, query) {\n            if (result.login.errors) {\n              return query;\n            } else {\n              return {\n                me: result.login.user\n              };\n            }\n          });\n        },\n        register: function register(_result, args, cache, info) {\n          MyUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, function (result, query) {\n            if (result.register.errors) {\n              return query;\n            } else {\n              return {\n                me: result.register.user\n              };\n            }\n          });\n        }\n      }\n    }\n  }), fetchExchange]\n});\n\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    value: client,\n    children: /*#__PURE__*/_jsxDEV(ChakraProvider, {\n      resetCSS: true,\n      theme: theme,\n      children: /*#__PURE__*/_jsxDEV(ColorModeProvider, {\n        options: {\n          useSystemColorMode: true\n        },\n        children: /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = MyApp;\nexport default MyApp;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyUpdateQuery\");\n$RefreshReg$(_c2, \"MyApp\");","map":{"version":3,"sources":["/home/s/tuto/web/src/pages/_app.tsx"],"names":["ChakraProvider","ColorModeProvider","cacheExchange","Provider","createClient","dedupExchange","fetchExchange","MeDocument","theme","MyUpdateQuery","cache","qi","result","fn","updateQuery","data","client","url","fetchOptions","credentials","exchanges","updates","Mutation","logout","_result","args","info","query","me","login","errors","user","register","MyApp","Component","pageProps","useSystemColorMode"],"mappings":"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","sourcesContent":["import { ChakraProvider, ColorModeProvider } from \"@chakra-ui/react\";\nimport { cacheExchange, Cache, QueryInput } from \"@urql/exchange-graphcache\";\nimport { Provider, createClient, dedupExchange, fetchExchange } from \"urql\";\nimport {\n  LoginMutation,\n  RegisterMutation,\n  MeDocument,\n  MeQuery,\n  LogoutMutation,\n} from \"../generated/graphql\";\nimport theme from \"../theme\";\n\nfunction MyUpdateQuery<Result, Query>(\n  cache: Cache,\n  qi: QueryInput,\n  result: any,\n  fn: (r: Result, q: Query) => Query // update function\n) {\n  return cache.updateQuery(qi, (data) => fn(result, data as any) as any);\n}\n\nconst client = createClient({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\",\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      updates: {\n        Mutation: {\n          logout: (_result, args, cache, info) => {\n            MyUpdateQuery<LogoutMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              () => ({ me: null })\n            );\n          },\n          login: (_result, args, cache, info) => {\n            MyUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.login.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.login.user,\n                  };\n                }\n              }\n            );\n          },\n          register: (_result, args, cache, info) => {\n            MyUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.register.user,\n                  };\n                }\n              }\n            );\n          },\n        },\n      },\n    }),\n    fetchExchange,\n  ],\n});\n\nfunction MyApp({ Component, pageProps }: any) {\n  return (\n    <Provider value={client}>\n      <ChakraProvider resetCSS theme={theme}>\n        <ColorModeProvider\n          options={{\n            useSystemColorMode: true,\n          }}\n        >\n          <Component {...pageProps} />\n        </ColorModeProvider>\n      </ChakraProvider>\n    </Provider>\n  );\n}\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}